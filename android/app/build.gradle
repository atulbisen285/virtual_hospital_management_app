plugins {
    id "com.android.application"
    id "kotlin-android"
    id 'com.google.gms.google-services'
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '1'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.0'

android {
    namespace "com.example.virtual_hospital_application"
    compileSdk 34
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    defaultConfig {
        applicationId "com.example.virtual_hospital_application"
        minSdkVersion 23
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            shrinkResources false
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'com.android.support:multidex:1.0.3'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.22"

    configurations.all {
        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'org.jetbrains.kotlin') {
                details.useVersion "1.8.22"
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'

// Task to restart Kotlin daemon
tasks.register("stopKotlinDaemon") {
    doLast {
        println "Stopping Kotlin Daemon..."
        def kotlinDaemonStop = new File("${project.gradle.gradleUserHomeDir}/daemon").listFiles()?.find { it.name.startsWith("kotlin-daemon") }
        if (kotlinDaemonStop != null) {
            println "Kotlin Daemon found and stopping it..."
            kotlinDaemonStop.deleteDir()
        } else {
            println "No Kotlin Daemon found to stop."
        }
    }
}

// Ensure Kotlin Daemon is stopped before building
preBuild.dependsOn stopKotlinDaemon
